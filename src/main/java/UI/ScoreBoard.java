package main.java.UI;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.*;

/**
 * @author Edward
 * @version 2
 * @since December 1, 2021
 */
public class ScoreBoard {
    private final String fileForName = "name.txt"; // to store this username
    private final String fileForScores = "scores.txt"; // to store names and scores
    private final String fileForThemes = "scores.txt"; // to store names and scores

    /**
     * Stores this user's name and score in scores.txt
     * <p>
     * The method imports values from scores.txt into ArrayList of Tuples
     * using getTopScores().
     * It scans the list to check if this user already achieved a higher
     * score. If so, nothing remains to be done.
     * It adds the name and score and then sorts the array using
     * sortTupleList(t).
     * Finally, it overrides scores.txt with the new list.
     * Each tuple is stored in a single line as name:score.
     *
     * @param name a string generated by GameState
     * @param score an integer generated by GameState
     */
    public void addScore(String name, int score) {
        ArrayList<Tuple> tuples = new ArrayList<>();
        tuples = getTopScores();
        boolean isNotListed = true; // is this username on file?
        name = name.trim();
        // scan and update this username if on file with a lower score
        for (int i = 0; i < tuples.size(); i++){
            if (tuples.get(i).getStr().equals(name)){
                if (tuples.get(i).getNum() > score){
                    return; // already has higher score
                }
                else {
                    tuples.get(i).setNum(score); // score updated
                    isNotListed = false;
                    break;
                }
            }
        }
        if (isNotListed) {
            tuples.add(new Tuple(name, score)); // added new username
        }
        // sort
        tuples = sortTupleList(tuples);
        try {
            FileWriter fileWriter = new FileWriter(fileForScores, false);  //overrides file
            for (int i = 0; i < tuples.size(); i++){
                fileWriter.write(tuples.get(i).getStr() + ":" + tuples.get(i).getNum() + "\n");
            }
            fileWriter.close();
        } catch (IOException e) {
            System.out.println("Error occurred while writing to scores.txt");
            e.printStackTrace();
        }
    }

    /**
     * Returns a list of tuples with names and scores from scores.txt.
     * <p>
     * It opens the text file and reads each line separately.
     * Each line is parsed based on the colon into an array of strings
     * A tuple is created and populated with the first string as the name
     * and the second string as an integer value.
     * Tuples are then added to the array and the array is returned.
     *
     * @return  an array list with tuples of names and scores.
     */
    public ArrayList<Tuple> getTopScores(){
        ArrayList<Tuple> tuples = new ArrayList<>();
        try {
            File file = new File("scores.txt");
            Scanner scanner = new Scanner(file);
            while (scanner.hasNextLine()) {
                String[] tokens = scanner.nextLine().split(":");
                Tuple tuple = new Tuple(tokens[0], Integer.valueOf(tokens[1]));
                tuples.add(tuple);
            }
            scanner.close();
        } catch (FileNotFoundException e) {
            System.out.println("Error occurred while reading scores.txt");
            e.printStackTrace();
        }
        // System.out.println();
        return tuples;
    }

    /**
     * Returns a formatted listing of top five scores.
     *
     * @return      "<html>1. Name score seconds<br>2. Name score ... </html>
     */
    public String topFive(){
        String output = "<html>";
        ArrayList<Tuple> tuples = getTopScores();
        int limit = tuples.size();
        // only top five are needed
        if (limit > 5){
            limit = 5;
        }
        for (int i = 0; i < limit; i++) {
            output = output + String.valueOf(i + 1) + ". " + tuples.get(i).getStr() +
                    ": " + String.valueOf(tuples.get(i).getNum()) + " seconds<br>";
        }
        output = output + "</html>";
        return output;
    }

    /**
     * Creates a new file named "name.txt" to store this username
     */
    public void createFile(){
        File file = new File(fileForName);
        try {
            if (file.createNewFile()) {
                System.out.println("File created: " + file.getName());
            } else {
                System.out.println("File already exists.");
            }
        } catch (IOException e) {
            System.out.println("File access error occurred.");
            e.printStackTrace();
        }
    }

    /**
     * Returns an array list of tuples sorted by the second field
     * <p>
     * The input is a list of pairs, each pair consisting of a string
     * and an integer, representing a username and their top score.
     * Using double for loop and an empty array list called result,
     * it picks a tuple from the input array and inserts it into
     * the resulting array in front of the tuple with a lower score.
     * The resulting array is thus sorted from the highest to the lowest.
     * The algorithm adds the input tuple to the end of the resulting array
     * when a higher tuple cannot be found.
     *
     * @param tuples    an array list of tuples to be sorted by the second field
     * @return          an array list of tuples sorted in descending order
     */
    public ArrayList<Tuple> sortTupleList(ArrayList<Tuple> tuples){
        ArrayList<Tuple> result = new ArrayList<>();
        for (int i = 0; i < tuples.size(); i++){
            if (result.isEmpty()){
                result.add(tuples.get(i));
            }
            else {
                for (int j = 0; j < result.size(); j++){
                    if (tuples.get(i).getNum() > result.get(j).getNum()){
                        // System.out.println("greater");
                        result.add(j, tuples.get(i));
                        break;
                    }
                    else if (j == result.size() - 1){
                        //System.out.println("at the tail");
                        result.add(tuples.get(i));
                        break;
                    }
                }
            }
        }
        return result;
    }

    /**
     * Records the theme selected by user
     *
     * @param theme     String for the game background: light or dark
     */
    public void writeTheme(String theme){
        try {
            FileWriter fileWriter = new FileWriter("theme.txt");
            fileWriter.write(theme);
            fileWriter.close();
        } catch (IOException e) {
            System.out.println("Writing error occurred when writing to theme.txt.");
            e.printStackTrace();
        }
    }

    public String readTheme() throws IOException {
        String text = "";
        try {
            File file = new File("theme.txt");
            Scanner scanner = new Scanner(file);
            while (scanner.hasNextLine()) {
                text = text + " " + scanner.nextLine();
            }
            scanner.close();
        } catch (FileNotFoundException e) {
            System.out.println("Error occurred while reading theme.txt.");
            FileWriter fileWriter = new FileWriter("theme.txt");
            fileWriter.write("light");
            fileWriter.close();
            // e.printStackTrace();
        }
        return text.trim();
    }

    /**
     * Creates an object with two elements: a string representing the name of
     * the user and an integer representing the user's score.
     */
    static class Tuple {
        String str;
        int num;
        public Tuple(String str, int num){
            this.str = str;
            this.num = num;
        }
        public String getStr(){return this.str;}
        public int getNum(){return this.num;}
        public void setStr(String str){this.str = str;}
        public void setNum(int num){this.num = num;}
    }
}